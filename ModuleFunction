import pandas as p
import numpy as n
from openpyxl.utils.dataframe import dataframe_to_rows
import openpyxl
from openpyxl import load_workbook
import csv, os

""" In this function you have to give first parameter as path of the input file(xlsx file) and
    second parameter as path of the output file(csv file) (full path with name of the input and
    and output files"""
def AREA(path,outputpath):
    f=p.read_excel(path,sheet_name='AREA')
    f=f.fillna("empty")
    g=list(f.iloc[:,0])
    h=list(f.iloc[:,1])

    if('Sr. No. ' in g):
        ind=g.index(1)
        s2=list(f.iloc[:,1])
        s3=list(f.iloc[:,5])
        s2[:ind]=[]
        s3[:ind]=[]
    elif('Sr. No. ' in h):
        ind=h.index(1)
        s2=list(f.iloc[:,2])
        s3=list(f.iloc[:,6])
        s2[:ind]=[]
        s3[:ind]=[]
    t=[]
    c=0
    L=['Sno','Desc','Area']
    t.append(L)
    for i in range(len(s2)):
        if(s3[i] not in ['empty',' ']):
            t.append([c,s2[i],s3[i]])
            c+=1

 
    pathcsv=outputpath
    file=open(pathcsv,'w',newline='')
    writer=csv.writer(file)
    writer.writerows(t)
    file.close()

# For function BOQ first var is the path of the file and second variable is the name of the sheet in which data is present
#Example: file = 'C:\\Users\\LENOVO\\Desktop\\Internship\\BOQ  - Tower A (1).xls'
# sheet_name = '(2)Est.-civil'
def BOQ(file, sheet_name):
    data = p.read_excel(file, sheet_name=sheet_name)
    
    try:
        data = data.drop('F-type', axis=1)
    except Exception:
        pass
    for element in data:
        print(element)

    i = 1
    for element in data:
        if i == 1:
            data = data.rename(columns={element:'S. No.'})
        elif i == 2:
            data = data.rename(columns={element:'Description'})
        elif i == 4:
            data = data.rename(columns={element:'F-type'})
        i+=1

    
    data = data.fillna('Empty')

    for element in data:
        print(element)
    workbook = openpyxl.Workbook()
    worksheet = workbook.active
    length = len(data['S. No.'])
    i = 1
    worksheet.cell(row=1, column=1).value = "SNo"
    worksheet.cell(row=1, column=2).value = "Description"
    worksheet.cell(row=1, column=3).value = "Quantity"
    worksheet.cell(row=1, column=4).value = "ID"

    longlist = []
    for element,quantity,description in zip(data['S. No.'],data['F-type'],data['Description']):
        if element != "Empty":
            print(element)
            i = i + 1
            worksheet.cell(row = i, column=1).value = i-1
            if quantity != "Empty":
                worksheet.cell(row=i, column=3).value = quantity
            digits = str(element).split('.')
            for digit in digits:
                if digit.isdigit():
                    Flag=True
                else:
                    Flag = False
                    break
       
            if Flag == True:
                worksheet.cell(row = i, column=4).value = element
                longlist.append(element)
            elif Flag == False:
                if '*' in element:
                
                    count = 0
                    for listelement in reversed(longlist):
                        if '*' in listelement:
                            count += 1
                        else:
                            previous = listelement
                            break
                    longlist.append('*')
                    alphanumerical = {0:'(a)' , 1:'(b)' , 2:'(c)', 3:'(d)' , 4:'(e)' , 5:'(f)' , 6:'(g)', 7:'(h)' , 8:'(i)', 9:'(j)' , 10:'(k)'}
                    value = str(previous)+alphanumerical[count]
                    worksheet.cell(row=i, column=4).value = value
                else:
                    try:
                        value = str(longlist[-1]) + str(element)
                    except IndexError:
                        continue
    
                    worksheet.cell(row=i, column=4).value = value            
        
        
            worksheet.cell(row = i, column=2).value = description
        
    
        
        




    workbook.save("output_file.csv")

# inputfile is the file in which rows to be replaced are mentioned
# datafile is the raw output file which is being processed further
# sheet_name_datafile is the sheet name of the datafile
# sheet_name_inputfile is the name of sheet in the input file
# outputfile is used to give unique output names to all files
# Function post_output_processing deletes redundant entries entered by user in inputfile and replaces them by row entered by user in the same file
# Description of deleted rows is added to the row by which they are replaced and quantity of replacing row is replaced by that of deleted rows if they are non zero
def post_output_processing(inputfile, datafile, sheet_name_datafile, sheet_name_inputfile, outputfile):
    data = pd.read_excel(datafile, sheet_name=sheet_name_datafile)
    data.fillna('Empty')
    data2 = pd.read_excel(inputfile, sheet_name = sheet_name_inputfile)
    for element, element2 in zip(data2['toremovecolumns'],data2['neededcolumn']):
        element = element.replace(' ','')
        listofelements = element.split(',')
        longstring = ''
        solo_quantity = 0
        for uniqueid, quantity, Sno, description in zip(data['ID'], data['Quantity'], data['SNo'], data['Description']):
            if str(uniqueid) == 'nan':
                data = data.drop(int(int(Sno)-1))
                continue
            if uniqueid in listofelements:
                if quantity != 'Empty':
                    solo_quantity = quantity
                longstring = longstring+description
                data = data.drop(int(int(Sno)-1))
                listofelements.remove(uniqueid) 
        if len(listofelements) == 0:
            for uniqueid, quantity, Sno, description in zip(data['ID'], data['Quantity'], data['SNo'], data['Description']):
                if uniqueid == element2:
                    data.loc[int(int(Sno)-1),'Description'] = data['Description'][int(int(Sno)-1)]+longstring
                    data.loc[int(int(Sno)-1),'Quantity'] = solo_quantity
def run(areafiles, boqfiles):
    for filepath in boqfiles:
        
        
    

datafile = 'outputfile.csv'
inputfile = 'inputfile.xlsx'
sheet_name_datafile = 'Sheet'
sheet_name_inputfile = 'Sheet1'
pathtofolder = 'C://Users/LENOVO/Desktop/outputfolder'
for outputfile in os.listdir(pathtofolder):
    post_output_processing(inputfile,str('C://Users/LENOVO/Desktop/outputfolder/'+outputfile), sheet_name_datafile, sheet_name_inputfile, outputfile)
